Notes
===============

/********************************************************************\
NOTICES FOR THE GROUP:

   NOTE FOR MATT:
      PLEASE STOP SPAMMING COMMITS FOR NO REASON
      YOU ALSO NEED TO FIND OUT HOW TO USE GIT
      AND UNDERSTAND WHAT IS HAPPENING
      AND THEN CONTRIBUTE TO THE TESTING FUNCTIONS

   GOOD NEWS EVERYONE!
      I ACTUALLY READ THE QUESTION, AND IT TURNS OUT THAT ALL WE HAVE
      TO DO FOR THIS WEEK IS MAKE THE STRUCT AND MAKE A PROGRAM TO
      TEST EACH OF THE FUNCTIONS IN THE .H
      :D

   TO DO LIST:
      LISTEN ERP
      PLS CONSULT THE TODO LIST AND UPDATE IT ONCE ALL TASK ARE 
      [COMPLETE].
      UPDATE EHT IF YOU THINK YOU ARE SEUR WHAT TO DO. TEK ENETIATIVE
      KDEN GOOD.

   CODE STYLING:
      WE WILL BE STICKING COMPLETELY TO THE STYLE GUIDE:
         3 SPACE TABS (CHANGE YOUR SETTINGS)
         AND NEVER GOING OVER 72 CHARACTERS (THERE IS A HELPFUL
         SETTING TO SET RULERS)
            THIS APPLIES TO ALL FILES - NOT JUST CODE (THIS IS TO
            MAKE IT LOOK PRETTY)
/********************************************************************\

Nope:

To do for now (needs updating):
- Create structs for verts, edges, and regions in the .c
- Make the game struct then put it in the .h as Game
- Plan out how to do the list and pointers between them
- Create the functions 

Plan:
- Have a player struct that stores things like:
   - KPI
   - Papers
   - Patents
   - Different types of student
   - Etc. -- TODO fill in
- Verticy struct:
   - Owner
   - Content type in .h
- Edge struct:
   - Owner (in other words, is there a grant on it, if so who owns it)
   - Adjacent vertices
- Region
   - Student producer
   - Dice number
   - Adjacent vertices
   
Splitting up of the Game.c functions brainstorm

Hector:

   isLegalAction:
      You wrote the tests so it's probs best if you write this one
      k i will


Wez:

   

Matt:



Hard SETTERS:

   newGame

   This one in particular is difficult and time consuming

   makeAction

   Will be very time consuming but largely not entirely difficult
   Debugging this may be hard...

Moderate SETTERS:

   disposeGame

   Not too hard, just make sure all mallocs are paired with a free

   throwDice

   Again not too hard, especially with some clarification
   as to its function


Hard GETTERS:

   isLegalAction -> Sorry Hector... :/

   This/these functions actually require some difficult calculations

Moderate GETTERS:

   getDiscipline
   getDiceValue

   These won't really be very hard, especially if you make sure in
   newGame you index the list of pointers to region structs in the
   same order as the two parsed lists

   getCampus
   getARC

   These require some following of pointers but won't be *too* difficult
   Though following paths will require some working out
   Maybe one person just both of these ones as they are pretty similar

   getExchangeRate

   Again, hard but not ridiculously so, especially if all the retraining
   centres are in the same places. You could just store a path to each
   of the retraining centres and use getCampus to check if the player
   has one there.

Easy GETTERS:

   getMostARCs
   getMostPublications
   getTurnNumber
   getWhoseTurn
   getKPIpoints
   getARCs
   getCampuses
   getGO8s
   getIPs
   getPublications
   getStudents

   All of these have an attribute in one of the structs so thats easy   
   
   
   
   
   
   
   
